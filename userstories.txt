JULY 17:

CSS/SASS with Foundation - check;

Fix the rewards button - CHECK!

Image Uploader - 

Make pages to show all of the owner's projects, all the backed projects (create a partial for this and render it). 

ADD TESTS

Then: add sorcery, cancan, tagging, image uploads


JULY 16: The layouts/application.html.erb file:

<!DOCTYPE html>
<html>
<head>
    <title>Crowdfunder</title>
    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
    <%= csrf_meta_tags %>
</head>
<body>
    <% if flash[:notice] %>
        <p id="notice"><%= flash[:notice] %></p>
    <% end %>
    <% if flash[:alert] %>
        <p id="alert"><%= flash[:alert] %></p>
    <% end %>

    <%= yield %>

 <p class="userinfo">
      <% if current_user %>
        Signed in as <%= current_user.name %>. <%= link_to "Log out", session_path("current"), :method => :delete %>
      <% else %>
        <%= link_to "Log in", new_session_path %> or <%= link_to "Sign up", new_user_path %>
      <% end %>
  </p>

</body>
</html>



===========

FINISHED WORK ON JULY 15/14 at 5:15pm.

Halfway through building REWARDS. Pick up at rainforest tutorial "concept: filters" for rewards model. 

Once rewards is built/working; 

-CSS (foundation)
-TESTS

=======

The cocoon gem works well. 

put it in your gemfile and bundle.

go to application.js and //= require cocoon after jquery

look it up an nathanvnda/cocoon on github.

<%= link_to_remove_association, 'remove task', r, %>

<%= link_to_add_association, 'add reward', f, :rewards %> is the thing that you add in your form - it has to be a partial

you can remove the 3.times.do build from your controller.

=======

Model

class Project < ActiveRecord::Base
    has_many :rewards

    accepts_nested_attributes_for :rewards
end

Project
project owner -> belongs_to
description
rewards / breakpoints -> has_many
deadline
goal
title
has_many :pledges

Backer
has_many :pledges

Pledge
belongs_to :project
belongs_to :user

Reward

class Reward < ActiveRecord::Base
    belongs_to :project

end

The migration will be 

class CreateRewards < ActiveRecord:: Migration

def change
    create_table :rewards do |t|
        t.belongs_to :project
        t.string :description
        t.integer :amount
        t.timestamps

    end
end

then rake db:migrate

***

Go to the projects controller and initialize 

def index 
@project = Project.all 
end

def new 
@project = Project.new
3.times { @project.rewards.build }
end

def create 
@project = Project.new(project_params)

if@project.save 
    redirect_to projects_url 
else
 render :new
end
end

private 
def project_params 
    params.require(:project).permit(:title, :description, rewards_attributes: [:amount, description])
end
end

Then create the projects view - new.html.erb

<%= form_for(@project) do |f| %>
    <div>
    <%= f.label :title %>
    <%= f.text_field :title %>
    </div>

    <div>
    <%= f.label :description %>
    <%= f.text_field :description %>
    </div>

    <%= f.fields_for :rewards do |r| %>
<div>
<p>Rewards</p>
    <%= r.label :description %>
    <%= r.text_field :description %>
</div>
<div>
    <%= r.label :amount %>
    <%= r.text_field :amount %>
</div>

    <% end %>

    <%= f.submit %>

<% end %>

then create the routes

resources :projects, only: [:index, :new, :create]

==========

How to collaborate on git

DON'T BREAK THE MASTER BRANCH. Only push into master if it's consensus.

Create new branches, for multiple commits.

atlassian.com/git/tutorial/git-branches#branch

use git checkout -b display-projects (or whatever) to switch branches.

git push origin display-projects:display-projects
    ie. git push origin locally_named_branch:name_of_branch_on_remote_repo

then can go back to git checkout master

if we're happy with display-projects, then we can merge it back in to master. first, git pull origin master - make sure master is up to date with origin. 

then you can do git merge display-projects

and you can delete the branch, once merged

git branch -D display-projects

you can't delete branches on github though. what you need to do is git push nothing:

git push origin :display-projects

that will delete the destination branch on github. 

you can also do tricks like git reset(!)



Jon Duckett HTML & CSS htmlandcssbook.com; and JavaScript & JQuery book.




==========

Iteration 1

    As a Project Owner, I want to be able to create a new project with a title and a description
    As a Project Owner, I want to set a goal for my project
    As a Project Owner, I want to set a funding period (start date, finish date) for my project
    As a Project Owner, I want the ability to set funding breakpoints with a description of what backers will receive for each breakpoint
    As a Backer, I want to be able to back a project at a certain breakpoint
        should be able to click on a breakpoint and have it submitted with no page refresh
        once submitted, upon success, the amount raised should update

Iteration 2

    As a Project Owner, I want to see how many days are left before my project is done
    As a Backer, When viewing a project, it should be very clear whether I have backed the project or not
    As a Project Owner, I want to see the total amount of money raised as of right now
    As a Backer, I want to see all of the projects that I have backed
    As a Backer, I want to see the total amount of money I have spent on projects

Iteration 3

    As a Project Owner, To help people find my project, I want the ability to add it to a category
    As a Project Owner, To help people find my project, I want the ability to add various tags to my project
    As a Backer, I want to be able to see all projects in a particular category
        use infinite scrolling
    As a Backer, I want the ability to see all the projects associated with a particular tag
        use infinite scrolling
    As a Backer, I want to see who the owner of a project is

Iteration 4

    As a Backer, I want to be able to leave comments on a project
        The comment should be submitted via AJAX
    As a Backer, I want the ability to leave comments on a project owner
        The comment should be submitted via AJAX

Iteration 5

    As a Project Owner, I want to see how many people have funded my project at each breakpoint
    As a Backer, I want to be notified when any projects I am backing meet their goal and are fully funded

Story Backlog

    As a user, I would like to see how many projects have been successfully funded
    As a user, I would like to see how many total people have funded projects
    As a user, I would like to see how many projects have been funded in a particular category
    As a user, I would like to see how much money has been raised in total
    As a user, I would like to see how much money has been raised for a particular category
    As a user, I would like to see the percentage of funded versus failed projects
    As a user, I want the ability to sign in/up with Crowdfunder using my gmail or Facebook account
    As a Project Owner, I want the ability to add updates my project
    As a Project Owner, I want the ability to notify people that I have added an update
    As a Project Owner, I would like the ability to set limits on how many people can fund at certain breakpoints
    As a Project Owner, I want to have some method of contacting backers individually
    As a Project Owner, I want to have some method of contacting all of my backers as a group
    As a Project Owner, I want to have a bio section where people can look me up and see all the projects I have created

JavaScript/AJAX

Listed below are some of the areas of the application in which JavaScript and/or AJAX is to be used. Feel free to use JS in other areas of your application if you feel that it would be useful (or fun).

    When a backer funds a project, there should be a nice highlighted flash message that appears at the top of the screen and fades out after 20 seconds or so
    backing a project should be AJAX and not require a page refresh
    Leaving a comment for a project should involve AJAX
    After someone backs a project, the metrics (how many backers there are, how many backers at the breakpoints, etc) should update without needing a page refresh
    listing of comments, and backers, should use infinite scrolling instead of paging
    When searching for a project by name, the app should use autocomplete/typeahead

Approach

Step 1 - Finding a Group

Find a partner. The best way to work on this project is in groups of at least two. But, instead of each person working on separate things, have each of you work on the same thing on the same computer. This is a case of going faster by going slower. Two brains will be better than one and two pairs of eyes have a better chance of catching errors that one set of eyes may miss.

Have one person typing and creating code and the other person watching and thinking about how the code that is being created will fit into the larger project.

Step 2 - Prioritizing User Stories

Prioritize the stories and figure out what you should work on first. There are a lot of stories and you won't have time to implement them all. You need to decide what stories you are ignoring. Once you have the stories prioritized and you know what you will work on first, make yourself a list.

Pick the first story and break it down into smaller tasks. Make a small checklist of what needs to be done before the story is considered done.

Step 3 - Screen Mockups

Just like for Seatyourself, create a few simple, quick screen UI mock ups. Don't spend too much time figuring out what your application will look like, but make sure you have a general feel for what pages you will have and what those pages will look like. Remember, this will change, so you just looking for a high level overview in this step. Also, remember to base the pages that you create on the stories that you will be implementing from step 2.